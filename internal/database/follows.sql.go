// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addFollows = `-- name: AddFollows :exec
INSERT INTO follows (follower_id, following_id)
VALUES ($1, $2)
`

type AddFollowsParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) AddFollows(ctx context.Context, arg AddFollowsParams) error {
	_, err := q.db.ExecContext(ctx, addFollows, arg.FollowerID, arg.FollowingID)
	return err
}

const getFollowerCount = `-- name: GetFollowerCount :one
SELECT COUNT(*) FROM follows
WHERE following_id = $1
`

func (q *Queries) GetFollowerCount(ctx context.Context, followingID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowerCount, followingID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowerList = `-- name: GetFollowerList :many
SELECT follower_id FROM follows
WHERE following_id = $1
`

func (q *Queries) GetFollowerList(ctx context.Context, followingID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerList, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var follower_id uuid.UUID
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingCount = `-- name: GetFollowingCount :one
SELECT COUNT(*) FROM follows
WHERE follower_id = $1
`

func (q *Queries) GetFollowingCount(ctx context.Context, followerID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowingCount, followerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowingList = `-- name: GetFollowingList :many
SELECT following_id FROM follows
WHERE follower_id = $1
`

func (q *Queries) GetFollowingList(ctx context.Context, followerID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingList, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var following_id uuid.UUID
		if err := rows.Scan(&following_id); err != nil {
			return nil, err
		}
		items = append(items, following_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFollows = `-- name: RemoveFollows :exec
DELETE FROM follows
WHERE follower_id = $1 AND following_id = $2
`

type RemoveFollowsParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) RemoveFollows(ctx context.Context, arg RemoveFollowsParams) error {
	_, err := q.db.ExecContext(ctx, removeFollows, arg.FollowerID, arg.FollowingID)
	return err
}
