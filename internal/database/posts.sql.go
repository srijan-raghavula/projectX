// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (author, title, body, media, isPrivate)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, author, title, body, media, createdat, updatedat, isprivate, likes, comments, shares, isdeleted, flagged, flag
`

type CreatePostParams struct {
	Author    uuid.NullUUID
	Title     string
	Body      sql.NullString
	Media     []string
	Isprivate sql.NullBool
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Author,
		arg.Title,
		arg.Body,
		pq.Array(arg.Media),
		arg.Isprivate,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Body,
		pq.Array(&i.Media),
		&i.Createdat,
		&i.Updatedat,
		&i.Isprivate,
		&i.Likes,
		&i.Comments,
		&i.Shares,
		&i.Isdeleted,
		&i.Flagged,
		&i.Flag,
	)
	return i, err
}

const flagPost = `-- name: FlagPost :exec
UPDATE posts
SET
    flagged = TRUE,
    flag = $2,
    isDeleted = TRUE
WHERE id = $1
`

type FlagPostParams struct {
	ID   uuid.UUID
	Flag sql.NullString
}

func (q *Queries) FlagPost(ctx context.Context, arg FlagPostParams) error {
	_, err := q.db.ExecContext(ctx, flagPost, arg.ID, arg.Flag)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, author, title, body, media, createdat, updatedat, isprivate, likes, comments, shares, isdeleted, flagged, flag FROM posts WHERE id = $1 AND isDeleted = FALSE
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Body,
		pq.Array(&i.Media),
		&i.Createdat,
		&i.Updatedat,
		&i.Isprivate,
		&i.Likes,
		&i.Comments,
		&i.Shares,
		&i.Isdeleted,
		&i.Flagged,
		&i.Flag,
	)
	return i, err
}

const getPostByUser = `-- name: GetPostByUser :many
SELECT id, author, title, body, media, createdat, updatedat, isprivate, likes, comments, shares, isdeleted, flagged, flag FROM posts
WHERE author = $1
ORDER BY createdAt DESC
`

func (q *Queries) GetPostByUser(ctx context.Context, author uuid.NullUUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostByUser, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Title,
			&i.Body,
			pq.Array(&i.Media),
			&i.Createdat,
			&i.Updatedat,
			&i.Isprivate,
			&i.Likes,
			&i.Comments,
			&i.Shares,
			&i.Isdeleted,
			&i.Flagged,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePost = `-- name: RemovePost :exec
UPDATE posts
SET isDeleted = TRUE
WHERE id = $1
`

func (q *Queries) RemovePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removePost, id)
	return err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
    title = $2,
    body = $3,
    media = $4,
    isPrivate = $5
WHERE id = $1
RETURNING id, author, title, body, media, createdat, updatedat, isprivate, likes, comments, shares, isdeleted, flagged, flag
`

type UpdatePostParams struct {
	ID        uuid.UUID
	Title     string
	Body      sql.NullString
	Media     []string
	Isprivate sql.NullBool
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Body,
		pq.Array(arg.Media),
		arg.Isprivate,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Body,
		pq.Array(&i.Media),
		&i.Createdat,
		&i.Updatedat,
		&i.Isprivate,
		&i.Likes,
		&i.Comments,
		&i.Shares,
		&i.Isdeleted,
		&i.Flagged,
		&i.Flag,
	)
	return i, err
}
