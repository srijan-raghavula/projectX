// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(firstName, lastName, username, email, password, region, about, pfpURL, gender, isPrivate, site, dob)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob
`

type CreateUserParams struct {
	Firstname string
	Lastname  sql.NullString
	Username  string
	Email     string
	Password  string
	Region    string
	About     sql.NullString
	Pfpurl    sql.NullString
	Gender    sql.NullString
	Isprivate sql.NullBool
	Site      sql.NullString
	Dob       sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Region,
		arg.About,
		arg.Pfpurl,
		arg.Gender,
		arg.Isprivate,
		arg.Site,
		arg.Dob,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Region,
		&i.About,
		&i.Pfpurl,
		&i.Createdat,
		&i.Updatedat,
		&i.Gender,
		&i.Isprivate,
		&i.Followers,
		&i.Following,
		&i.Posts,
		&i.Site,
		&i.Isdeleted,
		&i.Dob,
	)
	return i, err
}

const delteUser = `-- name: DelteUser :exec
UPDATE users
SET isDeleted = TRUE WHERE id = $1
`

func (q *Queries) DelteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob FROM users WHERE email = $1 AND isDeleted = FALSE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Region,
		&i.About,
		&i.Pfpurl,
		&i.Createdat,
		&i.Updatedat,
		&i.Gender,
		&i.Isprivate,
		&i.Followers,
		&i.Following,
		&i.Posts,
		&i.Site,
		&i.Isdeleted,
		&i.Dob,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob FROM users WHERE id = $1 AND isDeleted = FALSE
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Region,
		&i.About,
		&i.Pfpurl,
		&i.Createdat,
		&i.Updatedat,
		&i.Gender,
		&i.Isprivate,
		&i.Followers,
		&i.Following,
		&i.Posts,
		&i.Site,
		&i.Isdeleted,
		&i.Dob,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob FROM users WHERE username= $1 AND isDeleted = FALSE
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Region,
		&i.About,
		&i.Pfpurl,
		&i.Createdat,
		&i.Updatedat,
		&i.Gender,
		&i.Isprivate,
		&i.Followers,
		&i.Following,
		&i.Posts,
		&i.Site,
		&i.Isdeleted,
		&i.Dob,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob FROM users
WHERE (LOWER(username) LIKE LOWER('%' || $1 || '%')
   OR LOWER(firstName) LIKE LOWER('%' || $1 || '%')
   OR LOWER(lastName) LIKE LOWER('%' || $1 || '%'))
AND isDeleted = FALSE
LIMIT 10
`

func (q *Queries) SearchUsers(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Region,
			&i.About,
			&i.Pfpurl,
			&i.Createdat,
			&i.Updatedat,
			&i.Gender,
			&i.Isprivate,
			&i.Followers,
			&i.Following,
			&i.Posts,
			&i.Site,
			&i.Isdeleted,
			&i.Dob,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    firstName = $2,
    lastName = $3,
    username = $4,
    email = $5,
    password = $6,
    region = $7,
    about = $8,
    pfpURL = $9,
    updatedAt = CURRENT_TIMESTAMP,
    gender = $10,
    isPrivate = $11,
    site = $12,
    isDeleted = $13,
    dob = $14
WHERE id = $1
RETURNING id, firstname, lastname, username, email, password, region, about, pfpurl, createdat, updatedat, gender, isprivate, followers, following, posts, site, isdeleted, dob
`

type UpdateUserProfileParams struct {
	ID        uuid.UUID
	Firstname string
	Lastname  sql.NullString
	Username  string
	Email     string
	Password  string
	Region    string
	About     sql.NullString
	Pfpurl    sql.NullString
	Gender    sql.NullString
	Isprivate sql.NullBool
	Site      sql.NullString
	Isdeleted sql.NullBool
	Dob       sql.NullTime
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Region,
		arg.About,
		arg.Pfpurl,
		arg.Gender,
		arg.Isprivate,
		arg.Site,
		arg.Isdeleted,
		arg.Dob,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Region,
		&i.About,
		&i.Pfpurl,
		&i.Createdat,
		&i.Updatedat,
		&i.Gender,
		&i.Isprivate,
		&i.Followers,
		&i.Following,
		&i.Posts,
		&i.Site,
		&i.Isdeleted,
		&i.Dob,
	)
	return i, err
}
